{"version":3,"file":"tratamentoSuporte/tratamentoSuporte.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,qCAAqC,IAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@fullcalendar-examples/webpack/./src/TratamentoSuporte/index.js"],"sourcesContent":["// Função para deletar um suporte específico pelo ID da key minhaLista\r\nfunction deleteSupport(id) {\r\n  const minhaLista = readSupport();\r\n  const updatedList = minhaLista\r\n    .map((client) => {\r\n      if (client.id === parseInt(id)) {\r\n        client.status = \"Concluído\"; // Atualiza o status para \"Concluído\"\r\n      }\r\n      return client;\r\n    })\r\n    .filter((client) => client.id !== parseInt(id));\r\n  setLocalStorageSupport(updatedList);\r\n}\r\n\r\n// Chama a função de deletar suporte e exibe um alerta informando que a mensagem foi excluída.\r\nfunction onClickButtonDelete() {\r\n  const id = document.getElementById(\"id\").value.trim();\r\n  if (id) {\r\n    deleteSupport(id);\r\n    alert(\"Mensagem excluída!\");\r\n    window.location.href = \"/codigo-fonte/src/ListagemSuporte/index.html\"; // Redireciona para a página de listagem após a exclusão\r\n  } else {\r\n    alert(\"ID não encontrado. Não foi possível excluir a mensagem.\");\r\n  }\r\n  // Após cada operação\r\n  console.log(\"Lista atualizada: \", getLocalStorageSupport());\r\n}\r\n\r\n// Recupera os dados de suporte do local storage da key minhaLista\r\nfunction getLocalStorageSupport() {\r\n  return JSON.parse(localStorage.getItem(\"minhaLista\")) ?? [];\r\n}\r\n\r\n// Lê os dados de suporte do local storage da key minhaLista\r\nfunction readSupport() {\r\n  return getLocalStorageSupport();\r\n}\r\n\r\n// Salva os dados de suporte no local storage na key minhaLista\r\nfunction setLocalStorageSupport(minhaLista) {\r\n  return localStorage.setItem(\"minhaLista\", JSON.stringify(minhaLista));\r\n}\r\n\r\n// Recupera as mensagens de suporte do local storage.\r\nfunction getLocalStorageSupportMessage() {\r\n  return JSON.parse(localStorage.getItem(\"db_support_reply\")) ?? [];\r\n}\r\n\r\n// Lê as mensagens de suporte do local storage.\r\nfunction readSupportMessage() {\r\n  return getLocalStorageSupportMessage();\r\n}\r\n\r\n// Salva a mensagem de suporte no local storage.\r\nfunction setLocalStorageSupportMessage(db_support_reply) {\r\n  return localStorage.setItem(\r\n    \"db_support_reply\",\r\n    JSON.stringify(db_support_reply)\r\n  );\r\n}\r\n\r\n// Recupera os parâmetros da query string da URL.\r\nfunction getQueryParams() {\r\n  const params = {};\r\n  const queryString = window.location.search.substring(1);\r\n  const regex = /([^&=]+)=([^&]*)/g;\r\n  let m;\r\n  while ((m = regex.exec(queryString))) {\r\n    params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\r\n  }\r\n  return params;\r\n}\r\n\r\n// Se houver dados nos parâmetros da query string, preenche o formulário com esses dados.\r\nconst queryParams = getQueryParams();\r\nif (queryParams.data) {\r\n  const clientData = JSON.parse(decodeURIComponent(queryParams.data));\r\n  fillFormWithData(clientData);\r\n}\r\n\r\n// Função para preencher o formulário com os dados fornecidos.\r\nfunction fillFormWithData(clientData) {\r\n  const idField = document.getElementById(\"id\");\r\n  const nameField = document.getElementById(\"nameClient\");\r\n  const emailField = document.getElementById(\"emailClient\");\r\n  const phoneField = document.getElementById(\"foneClient\");\r\n  const messageField = document.getElementById(\"text-value-msg\");\r\n\r\n  if (idField && nameField && emailField && phoneField && messageField) {\r\n    idField.value = clientData.id;\r\n    nameField.value = clientData.nome;\r\n    emailField.value = clientData.email;\r\n    phoneField.value = clientData.telefone;\r\n    messageField.value = clientData.mensagem;\r\n  } else {\r\n    console.error(\"Um ou mais elementos do formulário não foram encontrados.\");\r\n  }\r\n}\r\n\r\n// Seta as infos para o evento de carregamento da janela.\r\nwindow.addEventListener(\"load\", () => {\r\n  // Define os campos de entrada como somente leitura.\r\n  setInputReadOnly(\"nameClient\", true);\r\n  setInputReadOnly(\"emailClient\", true);\r\n  setInputReadOnly(\"foneClient\", true);\r\n  setInputReadOnly(\"text-value-msg\", true);\r\n  setInputReadOnly(\"text-value-resp\", true);\r\n});\r\n\r\n// Função para definir um campo de entrada como somente leitura ou editável.\r\nfunction setInputReadOnly(id, isReadOnly) {\r\n  const element = document.getElementById(id);\r\n  if (element) {\r\n    element.readOnly = isReadOnly;\r\n  } else {\r\n    console.error(`Elemento com ID ${id} não encontrado.`);\r\n  }\r\n}\r\n\r\n// Torna o campo de resposta editável quando o botão de inserir resposta é clicado.\r\nfunction onClickButtonEnterAnswer() {\r\n  setInputReadOnly(\"text-value-resp\", false);\r\n}\r\n\r\nfunction sendReply() {\r\n  const id = document.getElementById(\"id\").value.trim();\r\n  const nome = document.getElementById(\"nameClient\").value.trim();\r\n  const email = document.getElementById(\"emailClient\").value.trim();\r\n  const celular = document.getElementById(\"foneClient\").value.trim();\r\n  const mensagem = document.getElementById(\"text-value-msg\").value.trim();\r\n  const resposta = document.getElementById(\"text-value-resp\").value.trim();\r\n\r\n  // Validar se todos os campos são preenchidos\r\n  if (!id || !nome || !email || !celular || !mensagem || !resposta) {\r\n    alert(\"Por favor, preencha todos os campos.\");\r\n    return;\r\n  }\r\n\r\n  // Cria um objeto de mensagem com os dados do cliente e da resposta.\r\n  const message = {\r\n    id: id,\r\n    nome: nome,\r\n    email: email,\r\n    celular: celular,\r\n    mensagem: mensagem,\r\n    resposta: resposta,\r\n    status: \"Concluído\", // Define o status como \"Concluído\"\r\n  };\r\n\r\n  // Salva a mensagem de suporte respondida no local storage.\r\n  createSupportMessage(message);\r\n\r\n  // Exclui a mensagem da minhaLista\r\n  deleteSupport(id);\r\n\r\n  // Limpa os campos do formulário.\r\n  clearFields();\r\n\r\n  // Exibe um alerta informando que a mensagem foi respondida.\r\n  alert(\"Mensagem respondida!\");\r\n  console.log(\"Lista atualizada: \", getLocalStorageSupport());\r\n}\r\n\r\n// Verifica se os campos do formulário são válidos.\r\nfunction isValidFields() {\r\n  return document.getElementById(\"form\").reportValidity();\r\n}\r\n\r\n// Limpa todos os campos do formulário.\r\nfunction clearFields() {\r\n  const dataSupport = document.querySelectorAll(\".dataSupport\");\r\n  dataSupport.forEach(function (field) {\r\n    field.value = \"\";\r\n  });\r\n}\r\n\r\n// Chama a função de enviar resposta quando o botão enviar é clicado.\r\nfunction onClickButtonSend() {\r\n  sendReply();\r\n}\r\n\r\n// Cria uma nova mensagem de suporte e a salva no local storage na key db_support_reply\r\nfunction createSupportMessage(client) {\r\n  const db_support_reply = getLocalStorageSupportMessage();\r\n  db_support_reply.push(client);\r\n  setLocalStorageSupportMessage(db_support_reply);\r\n}\r\n"],"names":[],"sourceRoot":""}